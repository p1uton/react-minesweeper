{"version":3,"sources":["functions.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["isNext","cell1","cell2","dc","Math","abs","col","dr","row","getCell","currentCells","id","filter","cell","shift","checkStatus","status","isOpen","isMine","length","count1","isFlag","count2","Cell","onClick","onMouseDown","onMouseUp","classes","push","minesNext","isMouseDown","className","join","event","onContextMenu","statuses","App","useState","cells","r","c","minesLeft","rand","floor","random","map","initialCells","setCells","setStatus","handleCellClick","isRightClick","preventDefault","concat","currentCell","flagCell","countFlagsNext","openCell","handleCellMouseDown","handleCellMouseUp","style","width","cols","height","rows","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5610f899.chunk.js","sourcesContent":["export const isNext = (cell1, cell2) => {\r\n  let dc = Math.abs(cell1.col - cell2.col);\r\n  let dr = Math.abs(cell1.row - cell2.row);\r\n  return (dc === 1 && dr === 1) || (dc === 0 && dr === 1) || (dc === 1 && dr === 0);\r\n};\r\n\r\nexport const getCell = (currentCells, id) => {\r\n  return currentCells.filter(cell => cell.id === id).shift();\r\n};\r\n\r\nexport const checkStatus = (currentCells, status) => {\r\n  if (0 !== currentCells.filter(cell => cell.isOpen && cell.isMine).length) {\r\n    return 3;\r\n  } else {\r\n    const count1 = currentCells.filter(cell => cell.isMine && !cell.isFlag).length;\r\n    const count2 = currentCells.filter(cell => !cell.isMine && !cell.isOpen).length;\r\n    if ((0 === count1) && (0 === count2)) {\r\n      return 2;\r\n    } else {\r\n      return status;\r\n    }\r\n  }\r\n};\r\n\r\nexport const countFlagsNext = (currentCells, id) => {\r\n  const currentCell = getCell(currentCells, id);\r\n  return currentCells.filter(cell => isNext(cell, currentCell) && cell.isFlag).length;\r\n};\r\n","import React from 'react';\r\n\r\nexport const Cell = ({cell, status, onClick, onMouseDown, onMouseUp}) => {\r\n  let classes = ['cell'];\r\n\r\n  if (0 === status) {\r\n    classes.push('cell-closed');\r\n  } else if (!cell.isOpen) {\r\n    if (cell.isFlag) {\r\n      if (1 === status) {\r\n        classes.push('cell-closed', 'cell-flag', 'cell-flag-red');\r\n      } else if ((2 === status) || (3 === status)) {\r\n        if (cell.isMine) {\r\n          classes.push('cell-closed', 'cell-flag', 'cell-flag-green');\r\n        } else {\r\n          classes.push('cell-closed', 'cell-flag', 'cell-flag-gray');\r\n        }\r\n      }\r\n    } else if (cell.isMine) {\r\n      if (3 === status) {\r\n        classes.push('cell-mine');\r\n      } else {\r\n        if (!cell.isMouseDown) {\r\n          classes.push('cell-closed');\r\n        }\r\n      }\r\n    } else {\r\n      if (!cell.isMouseDown) {\r\n        classes.push('cell-closed');\r\n      }\r\n    }\r\n  } else {\r\n    if (cell.isMine) {\r\n      classes.push('cell-mine', 'cell-detonated');\r\n    } else if (0 !== cell.minesNext) {\r\n      classes.push('cell-' + cell.minesNext);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classes.join(' ')}\r\n      onClick={event => onClick(event, cell.id, false)}\r\n      onContextMenu={event => onClick(event, cell.id, true)}\r\n      onMouseDown={event => onMouseDown(event, cell.id)}\r\n      onMouseUp={event => onMouseUp(event, cell.id)}\r\n    />\r\n  );\r\n};\r\n","import React, {useState} from 'react';\nimport {isNext, getCell, checkStatus, countFlagsNext} from './functions';\nimport {Cell} from './Cell';\n\nconst rows = 16;\nconst cols = 30;\nconst minesCount = 99;\n\nconst statuses = [\n  'new',\n  'play',\n  'win',\n  'lost',\n];\n\nconst initialCells = () => {\n  let cells = [];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      cells.push({\n        id: r * cols + c,\n        row: r,\n        col: c,\n        isOpen: false,\n        isMine: false,\n        isFlag: false,\n        isMouseDown: false,\n        minesNext: 0,\n      });\n    }\n  }\n\n  let minesLeft = minesCount;\n\n  while (minesLeft > 0) {\n    let rand = Math.floor(Math.random() * cells.length);\n    if (!cells[rand].isMine) {\n      cells[rand].isMine = true;\n      minesLeft--;\n    }\n  }\n\n  cells.map(cell => {\n    cell.minesNext = cells.filter(cell2 => isNext(cell, cell2) && cell2.isMine).length;\n    return cell;\n  });\n\n  return cells;\n};\n\n\nfunction App() {\n\n  const [cells, setCells] = useState(() => initialCells());\n  const [status, setStatus] = useState(() => 0);\n\n\n  const handleCellClick = (event, id, isRightClick) => {\n    event.preventDefault();\n\n    if ((2 === status) || (3 === status)) {\n      return;\n    }\n\n    if (0 === status) {\n      setStatus(1);\n    }\n\n    let currentCells = cells.concat();\n\n    const currentCell = getCell(currentCells, id);\n\n    if (isRightClick) {\n      if (!currentCell.isOpen) {\n        flagCell(currentCells, id);\n      }\n    } else {\n      if (!currentCell.isFlag) {\n        if (!currentCell.isOpen) {\n          openCell(currentCells, id);\n        } else {\n          if (currentCell.minesNext === countFlagsNext(currentCells, id)) {\n            currentCells\n              .filter(cell => isNext(cell, currentCell) && !cell.isOpen && !cell.isFlag && cell.isMine)\n              .map(cell => openCell(currentCells, cell.id));\n            if (3 !== checkStatus(currentCells, status)) {\n              currentCells\n                .filter(cell => isNext(cell, currentCell) && !cell.isOpen && !cell.isFlag)\n                .map(cell => openCell(currentCells, cell.id));\n            }\n          }\n        }\n      }\n    }\n\n    setCells(currentCells);\n\n    setStatus(status => checkStatus(currentCells, status));\n  };\n\n\n  const handleCellMouseDown = (event, id) => {\n    event.preventDefault();\n    // console.log('handleCellMouseDown', id);\n\n    let currentCells = cells.concat();\n    const currentCell = getCell(currentCells, id);\n\n    if (currentCell.isOpen) {\n      currentCells\n        .filter(cell => isNext(cell, currentCell) && !cell.isOpen && !cell.isFlag)\n        .map(cell => cell.isMouseDown = true);\n\n      setCells(currentCells);\n    }\n  };\n\n\n  const handleCellMouseUp = (event, id) => {\n    event.preventDefault();\n    // console.log('handleCellMouseUp', id);\n\n    let currentCells = cells.concat();\n    const currentCell = getCell(currentCells, id);\n\n    if (currentCell.isOpen) {\n      currentCells\n        .filter(cell => isNext(cell, currentCell) && !cell.isOpen && !cell.isFlag)\n        .map(cell => cell.isMouseDown = false);\n\n      setCells(currentCells);\n    }\n  };\n\n\n  const flagCell = (currentCells, id) => {\n    currentCells.map(cell => cell.id === id ? cell.isFlag = !cell.isFlag : null);\n  };\n\n\n  const openCell = (currentCells, id) => {\n    currentCells.map(cell => cell.id === id ? cell.isOpen = true : null);\n\n    const currentCell = getCell(currentCells, id);\n    if (!currentCell.isMine && (0 === currentCell.minesNext)) {\n      currentCells\n        .filter(cell => isNext(cell, currentCell) && !cell.isOpen && !cell.isFlag)\n        .map(cell => openCell(currentCells, cell.id));\n    }\n  };\n\n\n  return (\n    <div>\n      <div className=\"field\" style={{width: cols*20, height: rows*20}}>\n        {cells.map(cell => <Cell\n          key={cell.id}\n          cell={cell}\n          status={status}\n          onClick={handleCellClick}\n          onMouseDown={handleCellMouseDown}\n          onMouseUp={handleCellMouseUp}\n        />)}\n      </div>\n      <hr />\n      status: {statuses[status]}\n      <br />\n      mines left: {cells.filter(cell => cell.isMine).length - cells.filter(cell => cell.isFlag).length}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}