{"version":3,"sources":["consts.js","actions.js","components/LevelSelector.js","components/Timer.js","components/Counter.js","components/Status.js","components/TopBar.js","components/Cell.js","functions.js","components/Field.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["LEVELS","id","name","rows","cols","mines","setStatusAction","status","type","payload","resetGameAction","level","openCellsAction","pressCellsAction","LevelSelector","dispatch","useDispatch","className","map","item","value","onClick","key","Timer","useSelector","state","useState","timer","setTimer","useEffect","interval","setInterval","clearInterval","Counter","cells","filter","cell","isMine","length","isFlag","Status","TopBar","Cell","onCellMouseDown","onCellMouseUp","onCellClick","classes","push","isOpen","minesNext","isPressed","join","onMouseDown","event","onMouseUp","onContextMenu","initialCells","r","c","row","col","minesLeft","rand","Math","floor","random","cell2","isNext","cell1","dc","abs","dr","getCell","currentCells","shift","countFlagsNext","currentCell","findNextCells","foundCells","isSearchTree","resultCells","indexOf","forEach","Field","preventDefault","button","flagCellAction","newStatus","count1","count2","checkStatus","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d7796cf.chunk.js","sourcesContent":["export const LEVELS = [\r\n  {\r\n    id: 0,\r\n    name: 'Beginner',\r\n    rows: 8,\r\n    cols: 8,\r\n    mines: 10,\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Intermediate',\r\n    rows: 16,\r\n    cols: 16,\r\n    mines: 40,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Expert',\r\n    rows: 16,\r\n    cols: 30,\r\n    mines: 99,\r\n  },\r\n];\r\n\r\nexport const SET_STATUS = 'SET_STATUS';\r\nexport const RESET_GAME = 'RESET_GAME';\r\nexport const FLAG_CELL = 'FLAG_CELL';\r\nexport const OPEN_CELLS = 'OPEN_CELLS';\r\nexport const PRESS_CELLS = 'PRESS_CELLS';\r\n\r\nexport const STATUS_NEW = 0;\r\nexport const STATUS_PLAY = 1;\r\nexport const STATUS_WIN = 2;\r\nexport const STATUS_LOST = 3;\r\n","import { FLAG_CELL, OPEN_CELLS, PRESS_CELLS, RESET_GAME, SET_STATUS } from './consts';\r\n\r\nexport const setStatusAction = status => {\r\n  return {\r\n    type: SET_STATUS,\r\n    payload: status,\r\n  };\r\n};\r\n\r\nexport const resetGameAction = level => {\r\n  return {\r\n    type: RESET_GAME,\r\n    payload: level,\r\n  };\r\n};\r\n\r\nexport const flagCellAction = id => {\r\n  return {\r\n    type: FLAG_CELL,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const openCellsAction = id => {\r\n  return {\r\n    type: OPEN_CELLS,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const pressCellsAction = id => {\r\n  return {\r\n    type: PRESS_CELLS,\r\n    payload: id,\r\n  };\r\n};","import React from 'react';\r\nimport { LEVELS } from '../consts';\r\nimport { useDispatch } from 'react-redux';\r\nimport { resetGameAction } from '../actions';\r\n\r\nexport const LevelSelector = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"bottombar\">\r\n      {\r\n        LEVELS.map(item => <input\r\n          type=\"button\"\r\n          value={item.name}\r\n          onClick={() => dispatch(resetGameAction(item.id))}\r\n          key={item.id}\r\n        />)\r\n      }\r\n    </div>\r\n  );\r\n  \r\n};","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { STATUS_NEW, STATUS_PLAY } from '../consts';\r\n\r\nexport const Timer = () => {\r\n\r\n  const status = useSelector(state => state.status);\r\n\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (STATUS_NEW === status) {\r\n      setTimer(0);\r\n    } else if (STATUS_PLAY === status) {\r\n      const interval = setInterval(() => {\r\n        setTimer(value => value + 1);\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [status]);\r\n\r\n  return (\r\n    <div className=\"topbar-block\">\r\n      {timer}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Counter = () => {\r\n\r\n  const cells = useSelector(state => state.cells);\r\n\r\n  return (\r\n    <div className=\"topbar-block\">\r\n      {cells.filter(cell => cell.isMine).length - cells.filter(cell => cell.isFlag).length}\r\n    </div>\r\n  );\r\n  \r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { resetGameAction } from '../actions';\r\n\r\nexport const Status = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector(state => state.status);\r\n  const level = useSelector(state => state.level);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={'status status' + status}\r\n        onClick={() => dispatch(resetGameAction(level))}\r\n      />\r\n    </div>\r\n  );\r\n\r\n};","import React from 'react';\r\nimport { Timer } from './Timer';\r\nimport { Counter } from './Counter';\r\nimport { Status } from './Status';\r\n\r\nexport const TopBar = () => {\r\n  return (\r\n    <div className=\"topbar\">\r\n      <Counter />\r\n      <Status />\r\n      <Timer />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { STATUS_NEW, STATUS_PLAY, STATUS_WIN, STATUS_LOST } from '../consts';\r\n\r\nexport const Cell = ({ cell, status, onCellMouseDown, onCellMouseUp, onCellClick }) => {\r\n  let classes = ['cell'];\r\n\r\n  if (STATUS_NEW === status) {\r\n    classes.push('cell-closed');\r\n  } else if (!cell.isOpen) {\r\n    if (cell.isFlag) {\r\n      if (STATUS_PLAY === status) {\r\n        classes.push('cell-closed', 'cell-flag', 'cell-flag-red');\r\n      } else if ((STATUS_WIN === status) || (STATUS_LOST === status)) {\r\n        if (cell.isMine) {\r\n          classes.push('cell-closed', 'cell-flag', 'cell-flag-green');\r\n        } else {\r\n          classes.push('cell-closed', 'cell-flag', 'cell-flag-gray');\r\n        }\r\n      }\r\n    } else if (cell.isMine) {\r\n      if (STATUS_LOST === status) {\r\n        classes.push('cell-mine');\r\n      } else {\r\n        if (!cell.isPressed) {\r\n          classes.push('cell-closed');\r\n        }\r\n      }\r\n    } else {\r\n      if (!cell.isPressed) {\r\n        classes.push('cell-closed');\r\n      }\r\n    }\r\n  } else {\r\n    if (cell.isMine) {\r\n      classes.push('cell-mine', 'cell-detonated');\r\n    } else if (0 !== cell.minesNext) {\r\n      classes.push('cell-' + cell.minesNext);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={classes.join(' ')}\r\n      onMouseDown={event => onCellMouseDown(event, cell.id)}\r\n      onMouseUp={event => onCellMouseUp(event, cell.id)}\r\n      onClick={event => onCellClick(event, cell.id)}\r\n      onContextMenu={event => onCellClick(event, cell.id)}\r\n    />\r\n  );\r\n};\r\n","import { STATUS_LOST, STATUS_WIN } from \"./consts\";\r\n\r\nexport const initialCells = ({ rows, cols, mines }) => {\r\n  let cells = [];\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < cols; c++) {\r\n      cells.push({\r\n        id: r * cols + c,\r\n        row: r,\r\n        col: c,\r\n        isOpen: false,\r\n        isMine: false,\r\n        isFlag: false,\r\n        isPressed: false,\r\n        minesNext: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  let minesLeft = mines;\r\n\r\n  while (minesLeft > 0) {\r\n    let rand = Math.floor(Math.random() * cells.length);\r\n    if (!cells[rand].isMine) {\r\n      cells[rand].isMine = true;\r\n      minesLeft--;\r\n    }\r\n  }\r\n\r\n  cells.map(cell => {\r\n    cell.minesNext = cells.filter(cell2 => isNext(cell, cell2) && cell2.isMine).length;\r\n    return cell;\r\n  });\r\n\r\n  return cells;\r\n};\r\n\r\n\r\nexport const isNext = (cell1, cell2) => {\r\n  const dc = Math.abs(cell1.col - cell2.col);\r\n  const dr = Math.abs(cell1.row - cell2.row);\r\n  return (dc === 1 && dr === 1) || (dc === 0 && dr === 1) || (dc === 1 && dr === 0);\r\n};\r\n\r\n\r\nexport const getCell = (currentCells, id) => {\r\n  return currentCells.filter(cell => cell.id === id).shift();\r\n};\r\n\r\n\r\nexport const checkStatus = (currentCells) => {\r\n  if (0 !== currentCells.filter(cell => cell.isOpen && cell.isMine).length) {\r\n    return STATUS_LOST;\r\n  } else {\r\n    const count1 = currentCells.filter(cell => cell.isMine && !cell.isFlag).length;\r\n    const count2 = currentCells.filter(cell => !cell.isMine && !cell.isOpen).length;\r\n    if ((0 === count1) && (0 === count2)) {\r\n      return STATUS_WIN;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nexport const countFlagsNext = (currentCells, id) => {\r\n  const currentCell = getCell(currentCells, id);\r\n  return currentCells.filter(cell => isNext(cell, currentCell) && cell.isFlag).length;\r\n};\r\n\r\n\r\nexport const findNextCells = (currentCells, id, foundCells, isSearchTree) => {\r\n  const currentCell = getCell(currentCells, id);\r\n\r\n  const resultCells = currentCells.filter(\r\n    cell => isNext(cell, currentCell)\r\n      &&\r\n      !cell.isOpen\r\n      &&\r\n      !cell.isFlag\r\n      &&\r\n      -1 === foundCells.indexOf(cell.id)\r\n  );\r\n\r\n  resultCells.forEach(cell => {\r\n    foundCells.push(cell.id);\r\n  });\r\n\r\n  if (isSearchTree) {\r\n    resultCells\r\n      .filter(cell => (0 === cell.minesNext))\r\n      .forEach(cell => findNextCells(currentCells, cell.id, foundCells, isSearchTree)\r\n        .forEach(cell => resultCells.push(cell))\r\n      );\r\n  }\r\n\r\n  return resultCells;\r\n};\r\n","import React from 'react';\r\nimport { STATUS_NEW, STATUS_PLAY, STATUS_WIN, STATUS_LOST } from '../consts';\r\nimport { Cell } from '../components/Cell';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { flagCellAction, openCellsAction, pressCellsAction, setStatusAction } from '../actions';\r\nimport { getCell, findNextCells, countFlagsNext, checkStatus } from '../functions';\r\n\r\nexport const Field = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const level = useSelector(state => state.level);\r\n  const cells = useSelector(state => state.cells);\r\n  const status = useSelector(state => state.status);\r\n\r\n  const onCellMouseDown = (event, id) => {\r\n    event.preventDefault();\r\n\r\n    if (STATUS_NEW === status) {\r\n      dispatch(setStatusAction(STATUS_PLAY));\r\n    }\r\n\r\n    if ((STATUS_WIN === status) || (STATUS_LOST === status)) {\r\n      return;\r\n    }\r\n\r\n    const currentCell = getCell(cells, id);\r\n\r\n    if (2 === event.button) {\r\n      if (!currentCell.isOpen) {\r\n        dispatch(flagCellAction(id));\r\n      }\r\n    } else {\r\n      if (!currentCell.isOpen) {\r\n        if (!currentCell.isFlag) {\r\n          dispatch(pressCellsAction([id]));\r\n        }\r\n      } else {\r\n        dispatch(pressCellsAction(findNextCells(cells, id, [], false).map(cell => cell.id)));\r\n      }\r\n    }\r\n  }\r\n\r\n  const onCellMouseUp = (event, id) => {\r\n    event.preventDefault();\r\n\r\n    if ((STATUS_WIN === status) || (STATUS_LOST === status)) {\r\n      return;\r\n    }\r\n\r\n    const currentCell = getCell(cells, id);\r\n\r\n    if (2 === event.button) {\r\n\r\n    } else {\r\n      if (!currentCell.isOpen) {\r\n        if (!currentCell.isFlag) {\r\n          dispatch(openCellsAction([id]));\r\n          if (currentCell.isMine) {\r\n            dispatch(setStatusAction(STATUS_LOST));\r\n          } else {\r\n            if ((countFlagsNext(cells, id) === currentCell.minesNext) || (0 === currentCell.minesNext)) {\r\n              dispatch(openCellsAction(findNextCells(cells, id, [], true).map(cell => cell.id)));\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        dispatch(pressCellsAction(findNextCells(cells, id, [], false).map(cell => cell.id)));\r\n        if (countFlagsNext(cells, id) === currentCell.minesNext) {\r\n          dispatch(openCellsAction(findNextCells(cells, id, [], true).map(cell => cell.id)));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  const onCellClick = (event, id) => {\r\n    event.preventDefault();\r\n\r\n    const newStatus = checkStatus(cells);\r\n\r\n    if (null !== newStatus) {\r\n      dispatch(setStatusAction(newStatus));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={'field field-' + level}>\r\n      {\r\n        cells.map(\r\n          cell => <Cell\r\n            key={cell.id}\r\n            cell={cell}\r\n            status={status}\r\n            onCellMouseDown={onCellMouseDown}\r\n            onCellMouseUp={onCellMouseUp}\r\n            onCellClick={onCellClick}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { LevelSelector } from './components/LevelSelector';\nimport { TopBar } from './components/TopBar';\nimport { Field } from './components/Field';\n\nfunction App() {\n  const level = useSelector(state => state.level);\n\n  return (\n    <div className={'container container-' + level}>\n      <TopBar />\n      <Field />\n      <LevelSelector />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FLAG_CELL, LEVELS, OPEN_CELLS, PRESS_CELLS, RESET_GAME, SET_STATUS, STATUS_NEW } from '../consts';\r\nimport { initialCells } from '../functions';\r\n\r\nconst initialState = {\r\n  level: 1,\r\n  status: STATUS_NEW,\r\n  cells: initialCells(LEVELS[1]),\r\n};\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case RESET_GAME:\r\n      return {\r\n        ...state,\r\n        level: action.payload,\r\n        status: initialState.status,\r\n        cells: initialCells(LEVELS[action.payload]),\r\n      };\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.payload,\r\n      };\r\n    case FLAG_CELL:\r\n      return {\r\n        ...state,\r\n        cells: state.cells.map(\r\n          cell => cell.id === action.payload\r\n            ? {\r\n              ...cell,\r\n              isFlag: !cell.isFlag,\r\n            }\r\n            : cell\r\n        ),\r\n      };\r\n    case OPEN_CELLS:\r\n      return {\r\n        ...state,\r\n        cells: state.cells.map(\r\n          cell => -1 !== action.payload.indexOf(cell.id)\r\n            ? {\r\n              ...cell,\r\n              isOpen: true,\r\n            }\r\n            : cell\r\n        ),\r\n      };\r\n    case PRESS_CELLS:\r\n      return {\r\n        ...state,\r\n        cells: state.cells.map(\r\n          cell => -1 !== action.payload.indexOf(cell.id)\r\n            ? {\r\n              ...cell,\r\n              isPressed: !cell.isPressed,\r\n            }\r\n            : cell\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}